const main = artifacts.require('./main')

contract('main', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    const batchno = "abc123"
    const medicineName = "med1"
    const dosage = "20mg"
    const ownerID = accounts[0]
    const originManufacturerID = accounts[1]
    const FactoryName = "cmpny1"
    const mfgdate = "11/10/2020"
    const expdate = "12/12/2023"
    var medicineState = 0
    const distributorID = accounts[2]
    const userID = accounts[3]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x651B7E7fc4E1D673110764b35fffF0CB989b6D0A
    ///(1)0x015f9674BC986c5a37B796A44c3a5223b9E2D973 
    ///(2)0x7BD1a8DB4Ce9bB2a61572E5535bF3961B88807B0
    ///(3)0xcF5391f91544B2708A735E6C090Ed8Cf8059D034
    ///(4)0x846780Da3BC14BCd5D3B777385585Fb2b9586fF0
    ///(5)0xdD3e8a90B4c1c3e5DeBDf559CD289c1826BC89Bb
    ///(6)0x47Fd83E9D9a410411Ea16ECBCD315904f6e26F59
    ///(7)0x8ecFc738BA4E6f3F68FF39464433773ED0b5Cbee
    ///(8)0x24Ca913e8a853251ECE085b33930F03cfb6f9e60 
    ///(9)0xf841Ea8854e2d770E788324031A89be196C97f75 

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Manufacturer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("User: accounts[3] ", accounts[3])

    // 1st Test
    it("Testing smart contract function makeMedicine() that allows a manufacturer to make medicine", async() => {
        const Main = await main.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Made()
        Main.Made((err, res) => {
            eventEmitted = true;
        })


        // Mark an medicine as Made by calling function makeMedicine()
        await Main.makeMedicine(batchno, medicineName, dosage, originManufacturerID, ownerID, FactoryName, mfgdate, expdate, medicineState, distributorID, userID)

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
        var resultBufferOne = await Main.fetchMedicineBufferOne.call(batchno)
        var resultBufferTwo = await Main.fetchMedicineBufferTwo.call(batchno)
            // Verify the result set
            // console.log(resultBufferOne);
            //console.log(resultBufferTwo);
        assert.equal(resultBufferOne[0], batchno, 'Error: Invalid medicine batchno')
        assert.equal(resultBufferOne[1], medicineName, 'Error: Missing or Invalid Medicine Name')
        assert.equal(resultBufferOne[4], dosage, 'Error: Missing or Invalid dosage')
        assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
        assert.equal(resultBufferOne[2], ownerID, 'Error : Missing or Invalid Medicine Name')
        assert.equal(resultBufferTwo[1], FactoryName, 'Error: Missing or Invalid FactoryName')
        assert.equal(resultBufferTwo[2], mfgdate, 'Error: Missing or Invalid mfg date')
        assert.equal(resultBufferTwo[3], expdate, 'Error: Missing or Invalid exp date')
        assert.equal(resultBufferOne[5], 0, 'Error: Missing or Invalid State')
        assert.equal(resultBufferTwo[4], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(resultBufferTwo[5], userID, 'Error: Missing or Invalid UserID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 2nd Test
    it("Testing smart contract function packMedicine() that allows a manufacturer to pack medicine", async() => {
            const Main = await main.deployed()

            // Declare and Initialize a variable for event
            var eventEmitted = false

            // Watch the emitted event Packed()
            Main.Packed((err, res) => {
                eventEmitted = true;
            })


            // Mark an medicine as Packed by calling function PackMedicine()
            await Main.packMedicine(batchno)

            var resultBufferOne = await Main.fetchMedicineBufferOne.call(batchno)
                //var resultBufferTwo = await Main.fetchMedicineBufferTwo.call(batchno)


            assert.equal(resultBufferOne[5], 1, 'Error: Invalid medicine State')
                //assert.equal(resultBufferTwo[4], distributorID, 'Error: Missing or Invalid distributorID')

            assert.equal(eventEmitted, true, 'Invalid event emitted')

        })
        //3rd test 
    it("Testing smart contract function receiveMedicine() that allows a user to mark medicine received", async() => {
            const Main = await main.deployed()

            // Declare and Initialize a variable for event

            var eventEmitted = false

            // Watch the emitted event Sold()
            Main.Sold((err, res) => {
                eventEmitted = true;
            })


            // Mark an medicine as Sold by calling function receiveMedicine()
            await Main.receiveMedicine(batchno)

            // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()
            var resultBufferOne = await Main.fetchMedicineBufferOne.call(batchno)
                //var resultBufferTwo = await Main.fetchMedicineBufferTwo.call(batchno)
            assert.equal(resultBufferOne[5], 2, 'Error: Invalid medicine State')
                //assert.equal(resultBufferTwo[5], userID, 'Error: Missing or Invalid UserID')
            assert.equal(eventEmitted, true, 'Invalid event emitted')


        })
        // Deleted as I have already tested them in the first case
        // 9th Test
    it("Testing smart contract function fetchMedicineBufferOne() that allows anyone to fetch medicine details from blockchain", async() => {
        const Main = await main.deployed()

        // Retrieve the just now saved medicine from blockchain by calling function fetchMedicine()


        // Verify the result set:

    })
});